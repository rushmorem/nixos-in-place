#!/bin/sh

set -eu

root_mount=$1
root_type=$2
grub_device=$3
digitalocean=$4
digitalocean_configs=""

if [ "$digitalocean" == "true" ];
then
  digitalocean_configs="
    ## Digital Ocean networking setup; manage interfaces manually
    networking.interfaces.eth0.useDHCP = false;
    networking.interfaces.eth1.useDHCP = false;

    systemd.services.setup-network = {
      wantedBy = [ \"multi-user.target\" ];
      after = [ \"network.target\" ];
      serviceConfig = {
        ExecStart = \"\${pkgs.bash}/bin/bash -i /etc/nixos-in-place/setup-network\";
      };
    };
  "
  mkdir -p /nixos/etc/nixos-in-place
  cp /nixos-in-place/setup-network /nixos/etc/nixos-in-place/

  ## Not a valid link now, but this will represent the file which DO will
  ## update each boot.
  mkdir -p /nixos/etc/network
  ln -sf /old-root/etc/network/interfaces /nixos/etc/network/
fi

## Enable host resolution
cp /etc/{external-,}resolv.conf

## Install dependencies; it's easier to do this here, in the Nix chroot,
## since we don't rely on the host system.
nix-env -i pcre

## Generate a base config
nixos-generate-config --root /nixos

source ./nixos-in-place/setup-network

cat <<EOF > /nixos/etc/nixos/nixos-in-place.nix
{ config, pkgs, ... }:
{
  ## Everything below is generated from nixos-in-place; modify with caution!
  boot.kernelParams = ["boot.shell_on_fail"];
  boot.loader.grub.device = "$grub_device";
  boot.loader.grub.storePath = "/nixos/nix/store";
  boot.initrd.supportedFilesystems = [ "$root_type" ];
  boot.initrd.postDeviceCommands = ''
    mkdir -p /mnt-root/old-root ;
    mount -t $root_type $root_mount /mnt-root/old-root ;
  '';
  fileSystems = {
    "/" = {
      device = "/old-root/nixos";
      fsType = "none";
      "options" = "bind";
    };
    "/old-root" = {
      device = "$root_mount";
      fsType = "$root_type";
    };
  };
  services.openssh = {
    enable = true;
    permitRootLogin = "yes";
    passwordAuthentication = false;
  };
  networking = {
    useDHCP = false;
    defaultGateway = "$gateway";
    interfaces = {
      eth0.ip4 = [ { address = "$eth0_address"; prefixLength = $eth0_prefix_length; } ];
      eth1.ip4 = [ { address = "$eth1_address"; prefixLength = $eth1_prefix_length; } ];
    };
    nameservers = [ "$ns1" "$ns1" ];
  };
  users = {
    extraUsers.root = {
      openssh.authorizedKeys.keys = [
        "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIDpBFEiZdKcsCeZ5ZrTzI2tEY0zcpIIJ8c5WbbMoOFd3 Laptop"
	"ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJ+/GoyARAfHiCiFf09TIJS5Z1tqVzsjwH3QX/vruVXx Controller"
      ];
    };
  };
  $digitalocean_configs
}
EOF

## Add in our configuration additions
nixos_dir=/nixos/etc/nixos
cp $nixos_dir/{,backup-}configuration.nix
sed -i 's|\(\s*\)\(./hardware-configuration.nix\)|\1\2\n\1./nixos-in-place.nix|' $nixos_dir/configuration.nix

## Remove the automatically-generated fileSystems configuration
mv $nixos_dir/{,backup-}hardware-configuration.nix
pcregrep -Mv "fileSystems.\"/\"[\s\S]*};" $nixos_dir/backup-hardware-configuration.nix > $nixos_dir/hardware-configuration.nix

## Installs grub and a base NixOS system; after a reboot, we're golden
nixos-install --root /nixos
exit
